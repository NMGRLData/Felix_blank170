do run
loading script "felix_analysis400_120.py"
loading script "felix_pump_ms.py"
loading script "felix_cocktail_x1.py"
loading script "felix_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=624.242112, duration=0.00025200843811
script duration name:analysis400_120 seconds:624.0
loading script "felix_analysis400_120.py"
loading script "felix_pump_ms.py"
loading script "felix_cocktail_x1.py"
loading script "felix_pump_extraction_line.py"
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=2.40802764893e-05
loading script "felix_analysis400_120.py"
loading script "felix_pump_ms.py"
loading script "felix_cocktail_x1.py"
loading script "felix_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=5.79357147217e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=0.0001380443573
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=32.0, duration=0.000102043151855
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=34.0, duration=0.000125885009766
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=2.0, duration=7.70092010498e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=34.0, duration=8.89301300049e-05
executed snippet estimated_duration=102.0, duration=0.00701999664307
script duration name:cocktail_x1 seconds:102.0
loading script "felix_analysis400_120.py"
loading script "felix_pump_ms.py"
loading script "felix_cocktail_x1.py"
loading script "felix_pump_extraction_line.py"
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=4.0, duration=0.000202178955078
executed snippet estimated_duration=4.0, duration=0.00137090682983
Script duration 726.0
Run total estimated duration= 727.000
run duration: 0:12:07
doing event level: 2
12:06:35 -- Setting default integration. t=1.048576
setting integration time = 1.048576
SetIntegrationTime 1.048576 ===>> OK
----------------- start -----------------
**************** Experiment Type: Ar/Ar, Ar/Ar
close session 4694241008
$$$$$ Clearing conditionals
adding conditionals 
Add queue conditionals
add default conditionals
adding default conditionals from /Users/obama/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
Start automated run bu-NF-F-129
loading script "felix_analysis400_120.py"
loading script "felix_pump_ms.py"
loading script "felix_cocktail_x1.py"
loading script "felix_pump_extraction_line.py"
%%%%%%%%%%%%%%%%%% setting automated run bu-NF-F-129
No value "sensitivity_multiplier" in metadata
$$$$$$$$$$$$$$$ auto_save_detector_ic=False
============================= Pre Extraction Check =============================
loading queue conditionals pre_run_terminations
loading system conditionals pre_run_terminations
loading conditionals from /Users/obama/PychronDev/setupfiles/spectrometer/default_conditionals.yaml
12:06:35 -- ******* Pre Extraction Check *******
Get a measurement from the spectrometer
GetData ===>> L2(CDD),0.00125795775396796,H2,0.132814986048699,H1,-0.0882508664790713,AX,-0.239255288306374,L1,...
Pre Extraction Termination data. keys=L2(CDD),H2,H1,AX,L1,L2, signals=0.00126,0.13281,-0.08825,-0.23926,-0.14346,0.00964
12:06:35 -- testing system defined conditionals
Checking default pre extraction terminations n=2
testing L2_CDD_
evaluate ot="L2(CDD).inactive" t="L2_CDD_", ctx="{'L2_CDD_': False}"
GetDeflection L2 (CDD) ===>> 0
testing L2_CDD_==3250
evaluate ot="L2(CDD).deflection==3250" t="L2_CDD_==3250", ctx="{'L2_CDD_': 0.0}"
12:06:35 -- ******* Pre Extraction Check Passed *******
=================================================================================
12:06:35 -- stopping status monitor
stop 4706405168
Status monitor stopped
Status monitor finished
12:06:36 -- starting status monitor
start 4706405168
StatusMonitor period=1. Frequencies(state=1, checksum=3, lock=5, owner=5)
start extraction
do extraction
Analysis started at 12:06:38.391664
Extraction Started felix_cocktail_x1.py
12:06:38 -- ******* Extraction Started felix_cocktail_x1.py *******
state changed from not run to extraction
DO EXTRACTION <pychron.extraction_line.pyscript_runner.RemotePyScriptRunner object at 0x11a7bad70>
testing...
no interpolation path defined
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=8.6784362793e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=0.000171899795532
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=32.0, duration=0.000105142593384
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=34.0, duration=0.000113964080811
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=2.0, duration=9.67979431152e-05
calculate duration
testing...
no interpolation path defined
executed snippet estimated_duration=34.0, duration=9.01222229004e-05
executed snippet estimated_duration=102.0, duration=0.00861287117004
Cocktail Pipette x1
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=5.19752502441e-05
Waiting for minibone access
wait ('JanMiniboneFlag', 0) {}
waiting for JanMiniboneFlag = 0
Read JanMiniboneFlag ===>> 0
finished waiting
Minibone released
wait ('MinibonePumpTimeFlag', 0) {}
waiting for MinibonePumpTimeFlag = 0
Read MinibonePumpTimeFlag ===>> 0
finished waiting
acquire ('FelixMiniboneFlag',) {'clear': True}
acquire FelixMiniboneFlag
Set FelixMiniboneFlag 1 ===>> OK
FelixMiniboneFlag acquired
set extraction state False (0.75, 'red', 1.5)
minibone acquired
executed snippet estimated_duration=0, duration=0.0150980949402
WaitForMiniboneAccess.py completed successfully
gosub finished
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=0.000174045562744
Prepare for Air Shot
close () {'description': 'Felix Inlet'}
closing name=--- desc=Felix Inlet
checking ownership. requestor=129.138.12.137
check software interlocks H
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close H ===>> OK
GetIndicatorState H ===>> False
change switch state (True, True)
update switch state H False args=() kw={} ncanvase=3
12:06:38 -- CLOSE  VALVE-H (Felix Inlet)
---------------------------------------- close None (Felix Inlet) result=[(True, True)]
action=close, ok=True, locked=[False]
open () {'description': 'Felix Ion Pump'}
opening name=--- desc=Felix Ion Pump
checking ownership. requestor=129.138.12.137
check software interlocks V
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open V ===>> OK
GetIndicatorState V ===>> OK
change switch state (True, True)
update switch state V True args=() kw={} ncanvase=3
12:06:38 -- OPEN   VALVE-V (Felix Ion Pump)
---------------------------------------- open None (Felix Ion Pump) result=[(True, True)], time=0.13 sec
abort run. Executor.isAlive=True
abort extracting run bu-NF-F-129
Abort Run
set extraction state False (0.75, 'green', 1.5)
wait dialog stopped
Abort run do_post_equilibration=True
Post Termination Started
12:06:39 -- ******* Post Termination Started *******
Post Equilibration Started felix_pump_extraction_line.py
Post Measurement Started felix_pump_ms.py
12:06:39 -- ******* Post Equilibration Started felix_pump_extraction_line.py *******
12:06:39 -- ******* Post Measurement Started felix_pump_ms.py *******
action=open, ok=True, locked=[False]
testing...
testing...
executed snippet estimated_duration=0, duration=0.816905975342
no interpolation path defined
no interpolation path defined
executed snippet estimated_duration=0, duration=3.21865081787e-05
testing...
calculate duration
Pumping spectrometer
no interpolation path defined
testing...
open () {'name': 'V'}
executed snippet estimated_duration=32.0, duration=0.000132083892822
no interpolation path defined
opening name=V desc=---
Evacuate Pipette 1
executed snippet estimated_duration=4.0, duration=0.000241994857788
open () {'description': 'Minibone to Turbo'}
executed snippet estimated_duration=4.0, duration=0.0074450969696
checking ownership. requestor=129.138.12.137
opening name=--- desc=Minibone to Turbo
Pump after analysis
check software interlocks V
doing GOSUB
checking ownership. requestor=129.138.12.137
interlocks []
check software interlocks P
actuate state mode=None-script, software_lock=False
testing...
interlocks []
doing actuation None-script open_channel False
no interpolation path defined
actuate state mode=None-script, software_lock=False
executed snippet estimated_duration=4.0, duration=0.000283002853394
doing actuation None-script open_channel False
Pump Bone
close () {'description': 'Felix Inlet'}
closing name=--- desc=Felix Inlet
checking ownership. requestor=129.138.12.137
check software interlocks H
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Open V ===>> OK
Open P ===>> OK
Close H ===>> OK
GetIndicatorState V ===>> OK
change switch state (True, True)
update switch state V True args=() kw={} ncanvase=3
12:06:39 -- OPEN   VALVE-V (Felix Ion Pump)
---------------------------------------- open V () result=[(True, True)], time=0.23 sec
GetIndicatorState P ===>> OK
change switch state (True, True)
update switch state P True args=() kw={} ncanvase=3
12:06:39 -- OPEN   VALVE-P (Minibone to Turbo)
---------------------------------------- open None (Minibone to Turbo) result=[(True, True)], time=0.29 sec
GetIndicatorState H ===>> False
change switch state (True, True)
update switch state H False args=() kw={} ncanvase=3
12:06:39 -- CLOSE  VALVE-H (Felix Inlet)
---------------------------------------- close None (Felix Inlet) result=[(True, True)]
action=open, ok=True, locked=[False]
executed snippet estimated_duration=0, duration=0.484348058701
felix_pump_ms.py completed successfully
setting _ms_pumptime
Post Measurement Finished
12:06:39 -- ******* Post Measurement Finished *******
----------------- stop -----------------
Post Termination Finished
12:06:39 -- ******* Post Termination Finished *******
----------------- finish -----------------
state changed from extraction to failed
----------------- stop -----------------
state changed from failed to aborted
action=open, ok=True, locked=[False]
close () {'description': 'Inner Pipette 1'}
closing name=--- desc=Inner Pipette 1
checking ownership. requestor=129.138.12.137
check software interlocks X
interlocks ['W']
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close X ===>> OK
action=close, ok=True, locked=[False]
is_closed ('A',) {}
is A () closed?
is closed False
close () {'description': 'CO2 Laser to Bone'}
closing name=--- desc=CO2 Laser to Bone
checking ownership. requestor=129.138.12.137
check software interlocks F
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-F(CO2 Laser to Bone) software locked
change switch state (True, False)
---------------------------------------- close None (CO2 Laser to Bone) result=[(True, False)]
action=close, ok=True, locked=[True]
sleep (1,) {}
SLEEP 1.0
GetIndicatorState X ===>> False
change switch state (True, True)
update switch state X False args=() kw={} ncanvase=3
12:06:39 -- CLOSE  VALVE-X (Inner Pipette 1)
---------------------------------------- close None (Inner Pipette 1) result=[(True, True)]
action=close, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
close () {'description': 'CO2 Laser to Roughing'}
closing name=--- desc=CO2 Laser to Roughing
checking ownership. requestor=129.138.12.137
check software interlocks G
interlocks []
actuate state mode=None-script, software_lock=True
VALVE-G(CO2 Laser to Roughing) software locked
change switch state (True, False)
---------------------------------------- close None (CO2 Laser to Roughing) result=[(True, False)]
action=close, ok=True, locked=[True]
open () {'description': 'Bone to Turbo'}
opening name=--- desc=Bone to Turbo
checking ownership. requestor=129.138.12.137
check software interlocks C
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open C ===>> OK
GetIndicatorState C ===>> OK
change switch state (True, True)
update switch state C True args=() kw={} ncanvase=3
12:06:41 -- OPEN   VALVE-C (Bone to Turbo)
---------------------------------------- open None (Bone to Turbo) result=[(True, True)], time=0.15 sec
open () {'description': 'Outer Pipette 1'}
opening name=--- desc=Outer Pipette 1
checking ownership. requestor=129.138.12.137
check software interlocks W
interlocks ['X']
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel True
Open W ===>> OK
action=open, ok=True, locked=[False]
open () {'description': 'Bone to Getter GP-50'}
opening name=--- desc=Bone to Getter GP-50
checking ownership. requestor=129.138.12.137
check software interlocks N
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open N ===>> OK
GetIndicatorState W ===>> OK
change switch state (True, True)
update switch state W True args=() kw={} ncanvase=3
12:06:41 -- OPEN   VALVE-W (Outer Pipette 1)
---------------------------------------- open None (Outer Pipette 1) result=[(True, True)], time=0.25 sec
GetIndicatorState N ===>> OK
change switch state (True, True)
update switch state N True args=() kw={} ncanvase=3
12:06:41 -- OPEN   VALVE-N (Bone to Getter GP-50)
---------------------------------------- open None (Bone to Getter GP-50) result=[(True, True)], time=0.21 sec
action=open, ok=True, locked=[False]
sleep (15,) {}
SLEEP 15.0
block started
WaitControl setup for 15.0  
action=open, ok=True, locked=[False]
open () {'description': 'Bone to Diode Laser'}
opening name=--- desc=Bone to Diode Laser
checking ownership. requestor=129.138.12.137
check software interlocks B
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open B ===>> OK
GetIndicatorState B ===>> OK
change switch state (True, True)
update switch state B True args=() kw={} ncanvase=3
12:06:41 -- OPEN   VALVE-B (Bone to Diode Laser)
---------------------------------------- open None (Bone to Diode Laser) result=[(True, True)], time=0.16 sec
action=open, ok=True, locked=[False]
open () {'description': 'Bone to CO2 Laser'}
opening name=--- desc=Bone to CO2 Laser
checking ownership. requestor=129.138.12.137
check software interlocks D
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open D ===>> OK
GetIndicatorState D ===>> OK
change switch state (True, True)
update switch state D True args=() kw={} ncanvase=3
12:06:42 -- OPEN   VALVE-D (Bone to CO2 Laser)
---------------------------------------- open None (Bone to CO2 Laser) result=[(True, True)], time=0.17 sec
action=open, ok=True, locked=[False]
sleep (1,) {}
SLEEP 1.0
%%%%%%%%%%%%%%%%%% Stop fired alive=True
12:06:42 -- stop execution
_cancel
set_resource () {'name': 'CO2PumpTimeFlag', 'value': 30}
Set CO2PumpTimeFlag 30 ===>> OK
release ('FelixCO2Flag',) {}
release FelixCO2Flag
Set FelixCO2Flag 0 ===>> OK
executed snippet estimated_duration=6.0, duration=4.34413909912
PumpBone.py completed successfully
gosub finished
get_resource_value () {'name': 'FelixMiniboneFlag'}
Read FelixMiniboneFlag ===>> 1
Get Resource Value FelixMiniboneFlag=1.0
doing GOSUB
testing...
no interpolation path defined
executed snippet estimated_duration=0, duration=3.50475311279e-05
get_resource_value () {'name': 'FelixMiniboneFlag'}
Read FelixMiniboneFlag ===>> 1
Get Resource Value FelixMiniboneFlag=1.0
Pump minibone
open () {'description': 'Bone to Minibone'}
opening name=--- desc=Bone to Minibone
checking ownership. requestor=129.138.12.137
check software interlocks E
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open E ===>> OK
GetIndicatorState E ===>> OK
change switch state (True, True)
update switch state E True args=() kw={} ncanvase=3
12:06:43 -- OPEN   VALVE-E (Bone to Minibone)
---------------------------------------- open None (Bone to Minibone) result=[(True, True)], time=0.17 sec
action=open, ok=True, locked=[False]
open () {'description': 'Minibone to Turbo'}
opening name=--- desc=Minibone to Turbo
checking ownership. requestor=129.138.12.137
check software interlocks P
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open P ===>> OK
GetIndicatorState P ===>> OK
change switch state (True, True)
update switch state P True args=() kw={} ncanvase=3
12:06:44 -- OPEN   VALVE-P (Minibone to Turbo)
---------------------------------------- open None (Minibone to Turbo) result=[(True, True)], time=0.16 sec
action=open, ok=True, locked=[False]
open () {'description': 'Quad Inlet'}
opening name=--- desc=Quad Inlet
checking ownership. requestor=129.138.12.137
check software interlocks Q
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script open_channel False
Open Q ===>> OK
GetIndicatorState Q ===>> OK
change switch state (True, True)
update switch state Q True args=() kw={} ncanvase=3
12:06:44 -- OPEN   VALVE-Q (Quad Inlet)
---------------------------------------- open None (Quad Inlet) result=[(True, True)], time=0.17 sec
action=open, ok=True, locked=[False]
close () {'description': 'Minibone to Bone'}
closing name=--- desc=Minibone to Bone
checking ownership. requestor=129.138.12.137
check software interlocks I
interlocks []
actuate state mode=None-script, software_lock=False
doing actuation None-script close_channel False
Close I ===>> OK
GetIndicatorState I ===>> False
change switch state (True, True)
update switch state I False args=() kw={} ncanvase=3
12:06:45 -- CLOSE  VALVE-I (Minibone to Bone)
---------------------------------------- close None (Minibone to Bone) result=[(True, True)]
action=close, ok=True, locked=[False]
set_resource () {'name': 'MinibonePumpTimeFlag', 'value': 30}
Set MinibonePumpTimeFlag 30 ===>> OK
release ('FelixMiniboneFlag',) {}
release FelixMiniboneFlag
Set FelixMiniboneFlag 0 ===>> OK
executed snippet estimated_duration=0, duration=2.04369997978
PumpMinibone.py completed successfully
gosub finished
executed snippet estimated_duration=4.0, duration=6.40438008308
felix_pump_extraction_line.py completed successfully
Post Equilibration Finished
12:06:45 -- ******* Post Equilibration Finished *******
Queue cancel. stop timer
Stop timer. self._timer: <pychron.core.helpers.timer.Timer object at 0x166ce2b90>
Estimated total time= 26034.0, elapsed time= 18.0, deviation= 26016.0
set extraction state False (0.75, 'green', 1.5)
wait dialog stopped
Cancel run state=None do_post_equilibration=True
wait dialog stopped
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% disable
set extraction state False (0.75, 'red', 1.5)
disable
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% disable
set extraction state False (0.75, 'red', 1.5)
disable
Post Termination Started
12:06:47 -- ******* Post Termination Started *******
----------------- stop -----------------
Post Termination Finished
12:06:47 -- ******* Post Termination Finished *******
----------------- finish -----------------
----------------- stop -----------------
Join finished
block finished. duration 5.62335109711
executed snippet estimated_duration=48.0, duration=8.04133200645
executed snippet estimated_duration=102.0, duration=8.88616394997
----------------- finish -----------------
----------------- stop -----------------
Extraction Finished unsuccessfully
12:06:47 -- ******* Extraction Finished unsuccessfully *******
failed execution step Extraction Failed
extraction did not complete successfully
state changed from aborted to failed
12:06:47 -- Automated run bu-NF-F-129 failed duration: 12.142 s
----------------- finish -----------------
----------------- stop -----------------
finish run. runs completed=1
write rem/ex queues
/Users/obama/PychronDev/experiments/rem/Load2_Adam.rem.txt
/Users/obama/PychronDev/experiments/rem/Load2_Adam.ex.txt
doing event level: 3
